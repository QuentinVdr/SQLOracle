SET SERVEROUTPUT ON;

/*
2.1 – Création des tables
*/

BEGIN
  DBMS_OUTPUT.PUT_LINE('Betclic Elite 2021-2022 :');
  FOR EQUIPE IN (
    SELECT
      DISTINCT E.NOM
    FROM
      BSKT_EQUIPES      E
      JOIN BSKT_EFFECTIFS EFF
      ON E.ID = EFF.EQUIPE
      JOIN BSKT_CHAMPIONNATS C
      ON EFF.CHAMPIONNAT = C.CODE
    WHERE
      C.LIBELLE = 'Betclic Elite'
      AND C.SAISON = '2021-2022'
    ORDER BY
      E.NOM
  ) LOOP
    DBMS_OUTPUT.PUT_LINE('    '
                         || EQUIPE.NOM);
  END LOOP;
END;
/

/*
2.2 – Equipe victorieuse
*/

CREATE OR REPLACE FUNCTION VAINQUEUR(
  P_MATCH_ID IN BSKT_MATCHS.ID%TYPE
) RETURN BSKT_EQUIPES.ID%TYPE AS
  V_SCORE_EQ1 BSKT_MATCHS.SCORE_EQ_1%TYPE;
  V_SCORE_EQ2 BSKT_MATCHS.SCORE_EQ_2%TYPE;
  V_EQUIPE_1  BSKT_MATCHS.EQUIPE_1%TYPE;
  V_EQUIPE_2  BSKT_MATCHS.EQUIPE_2%TYPE;
BEGIN
  SELECT
    SCORE_EQ_1,
    SCORE_EQ_2,
    EQUIPE_1,
    EQUIPE_2 INTO V_SCORE_EQ1,
    V_SCORE_EQ2,
    V_EQUIPE_1,
    V_EQUIPE_2
  FROM
    BSKT_MATCHS
  WHERE
    ID = P_MATCH_ID;
  IF V_SCORE_EQ1 > V_SCORE_EQ2 THEN
    RETURN V_EQUIPE_1;
  ELSIF V_SCORE_EQ2 > V_SCORE_EQ1 THEN
    RETURN V_EQUIPE_2;
  ELSE
    RETURN 0;
  END IF;
END;
/

-- Tests
BEGIN
  DBMS_OUTPUT.PUT_LINE('Equipe vainqueur match 1: '
                       || VAINQUEUR(1));
  DBMS_OUTPUT.PUT_LINE('Equipe vainqueur match 2: '
                       || VAINQUEUR(2));
END;
/

/*
2.3 – Ranking d'un joueur
*/

CREATE OR REPLACE FUNCTION RANKING(
  P_JOUEUR_ID IN BSKT_STATS_MATCHS.JOUEUR%TYPE,
  P_MATCH_ID IN BSKT_STATS_MATCHS.MATCH%TYPE
) RETURN NUMBER AS
  V_PTS         NUMBER;
  V_PAD         NUMBER;
  V_INTER       NUMBER;
  V_TIRSREUSSIS NUMBER;
  V_TIRSTENTES  NUMBER;
  V_LFREUSSIS   NUMBER;
  V_LFTENTES    NUMBER;
  V_FAUTES      NUMBER;
  V_RANKING     NUMBER;
BEGIN
  SELECT
    (T3_REUSSIS * 3) + (T2_REUSSIS * 2) + LF_REUSSIS,
    PASSES_DEC,
    INTER,
    T3_REUSSIS + T2_REUSSIS,
    T3_TENTES + T2_TENTES,
    LF_REUSSIS,
    LF_TENTES,
    FAUTES INTO V_PTS,
    V_PAD,
    V_INTER,
    V_TIRSREUSSIS,
    V_TIRSTENTES,
    V_LFREUSSIS,
    V_LFTENTES,
    V_FAUTES
  FROM
    BSKT_STATS_MATCHS
  WHERE
    JOUEUR = P_JOUEUR_ID
    AND MATCH = P_MATCH_ID;
  V_RANKING := V_PTS + V_PAD + V_INTER + (V_TIRSREUSSIS - V_TIRSTENTES) + (V_LFREUSSIS - V_LFTENTES) - V_FAUTES;
  RETURN V_RANKING;
END;
/

-- Tests
BEGIN
  DBMS_OUTPUT.PUT_LINE('Ranking joueur 1 match 1: '
                       || RANKING(1, 1));
  DBMS_OUTPUT.PUT_LINE('Ranking joueur 2 match 1: '
                       || RANKING(2, 1));
END;
/

/*
2.4 – Contrôle des reports de match
*/

CREATE OR REPLACE TRIGGER TRG_MATCH_REPORT BEFORE
  UPDATE ON BSKT_MATCHS FOR EACH ROW WHEN (NEW.DATE_MATCH < SYSDATE)
BEGIN
  RAISE_APPLICATION_ERROR(-20200, 'Impossible de reporter le match à une date qui n''est pas dans le futur');
END;
/

-- Tests
UPDATE BSKT_MATCHS
SET
  DATE_MATCH = SYSDATE - 1
WHERE
  ID = 1;

/*
2.5 Génération du libelle de saison
*/
CREATE OR REPLACE TRIGGER TRG_CHAMP_SAISON BEFORE
  INSERT ON BSKT_CHAMPIONNATS FOR EACH ROW
BEGIN
  :NEW.SAISON := TO_CHAR(:NEW.DEBUT, 'YYYY')
                 || '-'
                 || TO_CHAR(:NEW.FIN, 'YYYY');
END;
/

-- Tests
INSERT INTO BSKT_CHAMPIONNATS (
  CODE,
  LIBELLE,
  DEBUT,
  FIN
) VALUES (
  'TEST2024',
  'Championnat test trigger',
  TO_DATE('01/09/2024', 'DD/MM/YYYY'),
  TO_DATE('30/06/2025', 'DD/MM/YYYY')
);

SELECT
  *
FROM
  BSKT_CHAMPIONNATS
WHERE
  CODE = 'TEST2024';
